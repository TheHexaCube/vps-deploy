---
- name: Bootstrap python 3 and such
  hosts: vps
  become: true
  tags:
    - bootstrap
    - python 

  roles:
      - mrlesmithjr.ansible_bootstrap_python

  post_tasks:
    - name: Ensure a locale exists
      locale_gen:
        name: en_US.UTF-8
        state: present

- name: Ensure sudo user is present
  hosts: vps
  become: true

  vars_files:
    - vars/credentials.yml

  tasks:
    - name: Set become group (Ubuntu)
      set_fact: become_group="sudo"
      when: ansible_os_family | lower == "debian"

    - name: Set become group (Redhat)
      set_fact: become_group="wheel"
      when: ansible_os_family | lower == "redhat"

    - name: Ensure user is present and part of sudoers
      ansible.builtin.user:
        name: '{{ system_user_name }}'
        shell: /bin/bash
        groups: '{{ become_group }}'
        append: yes
        password: '{{ system_user_pass }}'
        generate_ssh_key: yes
        ssh_key_bits: 4096

# Consider adding this https://github.com/dev-sec/ansible-collection-hardening
 
- name: Install acme.sh, aquire certs, and generate dhparams
  hosts: vps
  become: true
  tags:
    - ssl

  vars_files:
    - vars/credentials.yml
    - vars/shared_vars.yml

  vars:
    acme_sh_copy_certs_to_path: '{{ cert_dir }}'
    acme_sh_become_user: "root"

    acme_sh_default_staging: true # Set to false for real ssl cert
    acme_sh_default_force_issue: false
    acme_sh_default_dns_provider: "dns_cf"
    acme_sh_default_dns_sleep: 120
    acme_sh_default_extra_flags_issue: '-k 4096'
    acme_sh_default_install_cert_reloadcmd: "sudo systemctl reload nginx && docker restart {{ mqtt_container_name }}"

    acme_sh_default_extra_flags_install_cert: "--cert-file {{ cert_dir }}/{{ domain }}.cert --ca-file {{ cert_dir }}/{{ domain }}.ca"
    acme_sh_domains:
      - domains: ["{{ domain }}", "*.{{ domain }}"]
        debug: False 
    
    dhparams_remote_directory: '{{ cert_dir }}'
    dhparams_key_size: 4096

  roles:
    - { role: "nickjj.acme_sh", tags: ["acme_sh"] }
    - duckle29.dhparam

- name: Set hostname of the server
  hosts: vps
  become: true
  tags:
    - hostname
  
  vars_files:
    - vars/shared_vars.yml
  
  tasks:
    - name: Set hostname
      ansible.builtin.hostname:
        name: '{{ hostname_fqdn }}'
    
    - name: Set hostname in /etc/hosts
      ansible.builtin.replace:
        path: /etc/hosts
        regexp: '^((?:[\d|a-fA-F|\.|:])+)(\s+[a-zA-z0-9]+\.contaboserver\.net.*)$'
        replace: \1 {{ hostname_fqdn }} {{ hostname }}

- name: Ensure the required python-docker bindings are installed
  hosts: vps
  become: true
  tags:
    - docker
    - python
  
  tasks:
    - name: Install docker api and docker-compose api
      pip:
        name:
          - docker
          - docker-compose

- name: Install the latest version of Docker-CE
  hosts: vps
  become: true
  tags:
    - docker
  
  vars:
    docker_edition: 'ce'
    docker_package_state: latest

    docker_service_state: started
    docker_service_enabled: true

    docker_install_compose: true
    
    docker_users:
      - '{{ system_user_name }}'
  
  roles:
    - geerlingguy.docker

- name: Install nginx
  hosts: vps
  become: true
  tags:
    - nginx

  vars_files:
    - vars/port_usage.yml
    - vars/shared_vars.yml
    - vars/nextcloud/main.yml

  pre_tasks:
    - name: Remove apache
      apt: 
        name: apache2
        state: absent

  roles:
    - nginxinc.nginx

  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: reloaded

  post_tasks:    
    - name: Make snippet directory
      file:
        dest: /etc/nginx/snippets
        state: directory
      notify:
        - reload nginx

    - name: Copy ssl snippet
      template:
        src: templates/nginx/ssl_snippets.j2
        dest: /etc/nginx/snippets/ssl
      notify:
        - reload nginx
    
    - name: Remove default nginx site
      file:
        dest: /etc/nginx/conf.d/default.conf
        state: absent
      notify:
        - reload nginx

- name: Deploy nginx site configs
  hosts: vps
  become: True
  tags:
    - sites
    - nginx

  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: reloaded

  vars_files:
    - vars/port_usage.yml
    - vars/shared_vars.yml
    - vars/nextcloud/main.yml
    - vars/credentials.yml

  tasks:

      # Deploys all .conf.j2 files in templates/nginx/sites
    - name: Deploy site configs
      template:
        src: '{{ item }}'
        dest: '/etc/nginx/conf.d/{{ (item | basename | splitext)[0] }}'
      with_fileglob:
        - templates/nginx/sites/*.conf.j2
      notify:
        - reload nginx

- name: Set up firewall
  hosts: vps
  become: true
  tags:
    - firewall
    - ufw

  vars_files:
    - vars/port_usage.yml
  
  vars:
    ufw_allowed_apps:
      - Deluge
      - Teamspeak 3 - Full
      - UniFi STUN
      - OpenSSH
      - Nginx Full
      - Satisfactory
      - InfluxDB
  
  roles:
    - ufw

- name: Configure unattended upgrades
  hosts: vps
  become: true
  tags:
    - unattended_upgrades
  
  roles:
    - role: jnv.unattended-upgrades
      unattended_mail: 'mikkel@{{ domain }}'



# - name: Install VerneMQ MQTT broker
#   hosts: vps
#   become: true
#   tags:
#     - mqtt
  
#   vars_files:
#     - vars/shared_vars.yml
#     - vars/port_usage.yml
#     - vars/credentials.yml
  
#   tasks:
#     - name: Set up VerneMQ config volume
#       community.docker.docker_volume:
#         name: duQTT-vernemq-cfg

#     - name: Start VerneMQ container
#       community.docker.docker_container:
#         name: duQTT-VerneMQ
#         image: vernemq/vernemq
#         networks:
#           - name: bridge
#         ports:
#           - '{{ portmap.vernemq[0] }}:8883'
#         networks_cli_compatible: yes
#         network_mode: default
#         restart_policy: 'unless-stopped'
#         volumes:
#           - '{{ cert_dir }}:/etc/ssl'
#           - 'duQTT-vernemq-cfg:/etc/vernemq'

#         env:
#           DOCKER_VERNEMQ_ACCEPT_EULA: 'yes'
#           DOCKER_VERNEMQ_LISTENER__SSL__DEFAULT: '0.0.0.0:{{ portmap.vernemq[0] }}'
#           DOCKER_VERNEMQ_LISTENER__SSL__DEFAULT__USE_IDENTITY_AS_USERNAME: 'off'
#           DOCKER_VERNEMQ_LISTENER__SSL__DEFAULT__REQUIRE_CERTIFICATE: 'off'
#           DOCKER_VERNEMQ_LISTENER__SSL__CAFILE: '/etc/ssl/{{ domain }}.pem'
#           DOCKER_VERNEMQ_LISTENER__SSL__KEYFILE: '/etc/ssl/{{ domain }}.key'
#           DOCKER_VERNEMQ_LISTENER__SSL__CERTFILE: '/etc/ssl/{{ domain }}.cert'
#           DOCKER_VERNEMQ_PLUGINS__VMQ_ACL: 'off'

#         container_default_behavior: 'no_defaults'
#         tty: no
#         read_only: no
#         privileged: no
#         paused: no
#         memory: "0"
#         interactive: no
#         init: no
#         detach: yes
#         auto_remove: no

